
name: CI

on:
#  push:
#  pull_request_target:
 pull_request:  # This will trigger everytime push

jobs:
  docker_build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Display the path
        run: echo $PATH
        shell: bash
      -
        name: Build the docker image
        run: docker buildx build . --tag jeewan/hyphen --load
      -
        name: Run the app
        run: docker run -d -p 50000:5000 jeewan/hyphen
      - 
        name: Sleep 10s
        run: sleep 10
      - 
        name: Test the image
        id: curl-result
        run: echo "::set-output name=foo::$(curl -sS localhost:50000/api/tasks)"
      - 
        name: Comment the output
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Hyphen Web Test Result  ðŸ–Œ\`${{ steps.curl-result.outcome }}\`
                        
            <details><summary>Show Output</summary>
            
            \`\`\`'${{ steps.curl-result.outputs.foo }}'\`\`\`
            
            </details>

            Add a comment \`apply\` to deploy changes
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # - # This is another method for commenting on a PR
      #   name: 'Comment PR'
      #   uses: unsplash/comment-on-pr@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     foo: ${{ steps.curl-result.outputs.foo }}
      #   with:
      #     msg: '${{ steps.curl-result.outputs.foo }}'

  terraform_plan:
    runs-on: ubuntu-latest
    env:
      RESOURCE_PREFIX: tf
      LOCATION: southeastasia
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    needs: docker_build
    steps:
      - 
        name: terraform setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.3
      # - 
      #   name: azure login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      #     allow-no-subscriptions: true
      -
        name: Checkout
        uses: actions/checkout@v2
      - 
        name: Run TF initialize
        run: terraform init
        working-directory: k8s
      - 
        name: Run TF plan
        id: plan
        run: terraform plan -var resource_prefix=env.RESOURCE_PREFIX -var location=env.LOCATION
        working-directory: k8s        
      - 
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plane ðŸ–Œ\`${{ steps.plan.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
